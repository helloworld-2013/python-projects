# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.forward = [0, 0]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
        self.image_thrust_ctr = [0, 0]
        self.image_thrust_ctr[0] = self.image_center[0] + self.image_size[0]
        self.image_thrust_ctr[1] = self.image_center[1]
        
        self.sound = sound
        if self.sound:
            self.sound.rewind()
            self.sound.play()
            self.sound.set_volume(0)
        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, self.image_thrust_ctr, self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)

    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.angle += self.angle_vel
        
        if self.thrust:
            self.forward = angle_to_vector(self.angle)
            self.forward[0] = self.forward[0] * .5
            self.forward[1] = self.forward[1] * .5
            
            self.vel[0] += self.forward[0]
            self.vel[1] += self.forward[1]
        else:
            self.vel[0] = self.vel[0] * (1 - .1)
            self.vel[1] = self.vel[1] * (1 - .1)
    
    def do_rotate(self, clockwise):
        if clockwise:
            self.angle_vel = .1
        else:
            self.angle_vel = -.1

    def no_rotation(self):
        self.angle_vel = 0

    def do_thrust(self):
        self.thrust = True
        self.sound.set_volume(.5)
        
    def no_thrust(self):
        self.thrust = False
        self.sound.set_volume(0)
        
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.forward = [0, 0]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        
        self.sound = sound
   
    def draw(self, canvas):
        canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        
        self.angle += self.angle_vel        
        
        self.vel[0] += self.forward[0]
        self.vel[1] += self.forward[1]

    def do_rotate(self, clockwise):
        if clockwise:
            self.angle_vel = .1
        else:
            self.angle_vel = -.1

    def no_rotation(self):
        self.angle_vel = 0
        
    def do_move(self, pos, vel = None, forward = None):
        if pos:
            self.pos = [pos[0], pos[1]]
        if vel:
            self.vel = [vel[0], vel[1]]
        if forward:
            self.forward = forward
            self.forward[0] *= .1
            self.forward[1] *= .1

    def do_sound(self):
        if self.sound:
            self.sound.rewind()
            self.sound.set_volume(.5)
            self.sound.play()
            
def key_up(key):
    if key==simplegui.KEY_MAP["up"]:
        my_ship.no_thrust()
    if key==simplegui.KEY_MAP["left"]:
        my_ship.no_rotation()
    if key==simplegui.KEY_MAP["right"]:
        my_ship.no_rotation()
    
def key_down(key):
    if key==simplegui.KEY_MAP["up"]:
        my_ship.do_thrust()
    if key==simplegui.KEY_MAP["left"]:
        my_ship.do_rotate(False)
    if key==simplegui.KEY_MAP["right"]:
        my_ship.do_rotate(True)
    if key==simplegui.KEY_MAP["space"]:
        a_pos = [my_ship.pos[0], my_ship.pos[1]]
        a_vel = [my_ship.vel[0], my_ship.vel[1]]
        a_forward = angle_to_vector(my_ship.angle)
        
        a_pos[0] = (a_pos[0] + a_forward[0] * 40) 
        a_pos[1] = (a_pos[1] + a_forward[1] * 40) 
        
        a_missile.do_move(a_pos, a_vel, a_forward)
        a_missile.do_sound()
           
def draw(canvas):
    global time
    
    # animiate background
    time += 1
    center = debris_info.get_center()
    size = debris_info.get_size()
    wtime = (time / 8) % center[0]
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, [center[0] - wtime, center[1]], [size[0] - 2 * wtime, size[1]], 
                                [WIDTH / 2 + 1.25 * wtime, HEIGHT / 2], [WIDTH - 2.5 * wtime, HEIGHT])
    canvas.draw_image(debris_image, [size[0] - wtime, center[1]], [2 * wtime, size[1]], 
                                [1.25 * wtime, HEIGHT / 2], [2.5 * wtime, HEIGHT])

    # draw ship and sprites
    my_ship.draw(canvas)
    a_rock.draw(canvas)
    a_missile.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    a_rock.update()
    a_missile.update()
    
    canvas.draw_text("Lives", (50, 50), 36, "White", "sans-serif")
    canvas.draw_text(str(lives), (50, 90), 36, "White", "sans-serif")
    canvas.draw_text("Score", (650, 50), 36, "White", "sans-serif")
    canvas.draw_text(str(score), (650, 90), 36, "White", "sans-serif")
            
# timer handler that spawns a rock    
def rock_spawner():
    rotation = [True, False]
    random.shuffle(rotation)
    a_rock.do_rotate(rotation[0])
    
    new_pos = [random.randint(100, WIDTH - 100), random.randint(100, HEIGHT - 100)]
    a_rock.do_move(new_pos)
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info, ship_thrust_sound)
a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [0, 0], 0, 0, asteroid_image, asteroid_info)
a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [0, 0], 0, 0, missile_image, missile_info, missile_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keyup_handler(key_up)
frame.set_keydown_handler(key_down)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
