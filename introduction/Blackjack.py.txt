# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = True
outcome = ""
offer_player = "Hit or Stand?"
score = 0
total_hit = 0
player_value = 0
dealer_value = 0

xpos_dealer = (15, 300)
xpos_player = (15, 500)
gap = 100

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
            self.show_card = True
            self.card1_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                              CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
            self.card2_loc = (CARD_BACK_CENTER[0],
                              CARD_BACK_CENTER[1])
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank
    
    def show_card_now(self, show_it):
        self.show_card = show_it

    def draw(self, canvas, pos):
        if self.show_card:
            canvas.draw_image(card_images, \
                              self.card1_loc, CARD_SIZE, \
                              [pos[0], pos[1]], CARD_SIZE)
        else:
            canvas.draw_image(card_back, \
                              self.card2_loc, CARD_BACK_SIZE,\
                              [pos[0], pos[1]], CARD_BACK_SIZE)
        
# define hand class
class Hand:
    def __init__(self, is_dealer, a_deck):
        # create Hand object
        self.reset(is_dealer, a_deck)
            
    def __str__(self):
        # return a string representation of a hand
        a_str = ""
        for i in range(len(self.cards)):
            a_str += str(self.cards[i]) + ":"
        return a_str

    def add_card(self, a_deck):
        # add a card object to a hand
        self.cards.append(a_deck.deal_card())

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        a_value = 0
        
        how_many_aces = 0
        
        for i in range(len(self.cards)):
            a_card = self.cards[i]
            a_rank = a_card.get_rank()
            
            if a_rank == 'A':
                how_many_aces += 1
            
            a_value += VALUES.get(a_rank)

        if (how_many_aces > 0) and (a_value < 21):
            for j in range(how_many_aces):
                new_value = a_value + 10
                if new_value < 21:
                    a_value = new_value
                else:
                    break
            
        return a_value
    
    def reset(self, is_dealer, a_deck):
        self.cards = []
        
        card1 = a_deck.deal_card()
        card2 = a_deck.deal_card()
        
        self.is_dealer = is_dealer

        if self.is_dealer:
            card1.show_card_now(False)
            card2.show_card_now(True)
        else:
            card1.show_card_now(True)
            card2.show_card_now(True)

        self.cards.append(card1)
        self.cards.append(card2)

    def show_hole_card(self):
        a_card = self.cards[0]
        a_card.show_card_now(True)
        
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        a_position = list(pos)
        for i in range(len(self.cards)):
            a_card = self.cards[i]
            a_position[0] += gap
            a_card.draw(canvas,a_position)
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.reset()

    def shuffle(self):
        # add cards back to deck and shuffle
        # use random.shuffle() to shuffle the deck
        random.shuffle(self.all_idx)
        self.current_idx = 0

    def deal_card(self):
        # deal a card object from the deck
        if self.current_idx < 52:
            a_idx = self.all_idx[self.current_idx]
            a_card = self.cards[a_idx]
            self.current_idx += 1
            return a_card
        else:
            return None
    
    def reset(self):
        self.all_idx = range(52)
        self.current_idx = 0
        self.cards = []
        for i in range(52):
            new_card = Card(SUITS[(i % 4)],RANKS[(i % 13)])
            self.cards.append(new_card)
        
        self.shuffle()
    
    def __str__(self):
        # return a string representing the deck
        a_str = ""
        for i in self.all_idx:
            a_str += str(self.cards[i]) + ":"
        return a_str

#define event handlers for buttons
def deal():
    global outcome, offer_player, score, in_play, \
    total_hit, player_value, dealer_value
    
    if in_play:
        score -= 1

    # your code goes here
    outcome = ""
    offer_player = "Hit or Stand?"
    in_play = True
    total_hit = 0
    player_value = 0
    dealer_value = 0
    
    a_deck.reset()
    
    player_hand.reset(False,a_deck)
    dealer_hand.reset(True,a_deck)

def hit():
    global player_value, outcome, offer_player, score, in_play, total_hit
    # replace with your code below
 
    # if the hand is in play, hit the player
    if in_play:
        total_hit += 1
       
        # if busted, assign a message to outcome, update in_play and score
        player_hand.add_card(a_deck)
        player_value = player_hand.get_value()
        if player_value > 21:
            outcome = "You went bust and lose."
            offer_player = "New Deal?"
            score -= 1
            in_play = False
            dealer_hand.show_hole_card()
        elif (total_hit == 3) and (player_value <= 21):
            outcome = "You won."
            offer_player = "New Deal?"
            score += 1
            in_play = False
            dealer_hand.show_hole_card()
        elif (total_hit == 3) or (player_value == 21):
            go_dealer_17()

def go_dealer_17():
    global player_value, dealer_value, outcome, offer_player, score, in_play

    dealer_hand.show_hole_card()
    
    player_value = player_hand.get_value()
    
    if in_play:
        while True:
            dealer_value = dealer_hand.get_value()
            if dealer_value < 17:
                dealer_hand.add_card(a_deck)
            else:
                break
        
        if dealer_value > 21:
            outcome = "You won."
            offer_player = "New Deal?"
            score += 1
            in_play = False
        elif player_value <= dealer_value:
            outcome = "You lose."
            offer_player = "New Deal?"
            score -= 1
            in_play = False
        else:
            outcome = "You won."
            offer_player = "New Deal?"
            score += 1
            in_play = False
            
        #print 'Player Value : ', player_value
        #print 'Dealer Value : ', dealer_value
            
def stand():
    # replace with your code below
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score
    go_dealer_17()

# draw handler    
def draw(canvas):
    canvas.draw_text("Blackjack", [50, 120], 60, "Yellow")
    canvas.draw_text("Score : " + str(score), [360, 120], 36, "Black")
    canvas.draw_text(offer_player, [240, 420], 36, "Black")
    canvas.draw_text("Dealer", [50, 230], 36, "Black")
    canvas.draw_text("Player", [50, 420], 36, "Black")
    canvas.draw_text(outcome, [240, 230], 36, "Black")
    
    player_hand.draw(canvas, xpos_player)
    dealer_hand.draw(canvas, xpos_dealer)

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# get things rolling
a_deck = Deck()

player_hand = Hand(False,a_deck)
dealer_hand = Hand(True,a_deck)

frame.start()

# remember to review the gradic rubric